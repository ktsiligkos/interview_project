# XM Companies Service API

Base URL: `http://localhost:8081/api/v1`

All responses are JSON. Error responses follow the shape `{"error": "<message>"}` unless stated otherwise.

## Authentication Flow
- Obtain a JWT by POST-ing credentials to `POST /api/v1/login`.
- Provide the JWT in an `Authorization: Bearer <token>` header for protected endpoints (`/companies` write operations).

## Endpoints

### `GET /api/v1/healthz`
- **Auth:** None
- **Description:** Liveness probe returning service status.
- **Success:** `200 OK` → `{"status":"ok"}`

### `POST /api/v1/login`
- **Auth:** None
- **Description:** Authenticates a user and issues a JWT.
- **Request Body:**
  ```json
  {
    "email": "john_doe@example.com",
    "password": "12345678"
  }
  ```
- **Success:** `200 OK` → `{"status":"success","token":"<jwt>"}`  
  (`token` is a JWT signed with the configured secret.)
- **Failures:**
  - `400 Bad Request` for malformed JSON.
  - `401 Unauthorized` for invalid credentials or token generation issues.
  - `404 Not Found` when the user email does not exist.
  - `500 Internal Server Error` for unexpected errors.

### `GET /api/v1/companies/{uuid}`
- **Auth:** None
- **Description:** Retrieves the company identified by the provided UUID.
- **Path Parameters:** `uuid` — string, required.
- **Success:** `200 OK` → company resource:
  ```json
  {
    "id": "4b1cdcf7-1b63-4f0a-b044-6d028af4ec5f",
    "name": "Acme Corp",
    "description": "Leading supplier of ACME components.",
    "amount_of_employees": 120,
    "registered": true,
    "type": "Corporations"
  }
  ```
- **Failures:**
  - `404 Not Found` when the company does not exist.
  - `500 Internal Server Error` for unexpected errors.

### `POST /api/v1/companies`
- **Auth:** Required (`Bearer` JWT).
- **Description:** Creates a new company and publishes a corresponding domain event.
- **Request Body:**
  ```json
  {
    "name": "Acme Corp",
    "description": "Leading supplier of ACME components.",
    "amount_of_employees": 120,
    "registered": true,
    "type": "Corporations"
  }
  ```
  - `type` must be one of: `Corporations`, `NonProfit`, `Cooperative`, `Sole Proprietorship`.
- **Success:** `201 Created` → newly created company (same shape as `GET` response, with generated `id`).
- **Failures:**
  - `400 Bad Request` for malformed JSON or validation failures.
  - `409 Conflict` when name uniqueness constraint is violated.
  - `500 Internal Server Error` for unexpected errors.

### `PATCH /api/v1/companies/{uuid}`
- **Auth:** Required (`Bearer` JWT).
- **Description:** Partially updates a company. Only provided fields are modified.
- **Path Parameters:** `uuid` — string, required.
- **Request Body:** Any subset of the fields below:
  ```json
  {
    "name": "ACME North",
    "description": "Regional office",
    "amount_of_employees": 40,
    "registered": false,
    "type": "Cooperative"
  }
  ```
- **Success:** `201 Created` → `{"status":"success"}`
- **Failures:**
  - `400 Bad Request` for malformed JSON or validation failures.
  - `404 Not Found` when the company does not exist.
  - `409 Conflict` for uniqueness violations.
  - `500 Internal Server Error` for unexpected errors.

### `DELETE /api/v1/companies/{uuid}`
- **Auth:** Required (`Bearer` JWT).
- **Description:** Deletes the specified company.
- **Path Parameters:** `uuid` — string, required.
- **Success:** `200 OK` → `{"status":"success"}`
- **Failures:**
  - `404 Not Found` when the company does not exist.
  - `500 Internal Server Error` for unexpected errors.

## Domain Notes
- Company types are enumerated as: `Corporations`, `NonProfit`, `Cooperative`, `Sole Proprietorship`.
- Company IDs are UUIDv4 strings generated by the service during creation.
- Successful create/update/delete operations emit Kafka events; ensure Kafka is running to avoid event loss.
